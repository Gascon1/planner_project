{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","columns","title","field","data","name","email","group","selectedRow","this","onRowClick","evt","setState","options","exportButton","grouping","pageSize","rowStyle","rowData","color","tableData","id","backgroundColor","editable","onRowAdd","newData","Promise","resolve","reject","setTimeout","prevState","onRowUpdate","oldData","clone","Object","assign","console","log","indexOf","onRowDelete","index","splice","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oSAGqBA,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,QAAS,CACP,CAAEC,MAAO,OAAQC,MAAO,QACxB,CACED,MAAO,QACPC,MAAO,SAET,CACED,MAAO,QACPC,MAAO,UAGXC,KAAM,CACJ,CACEC,KAAM,iBACNC,MAAO,6BACPC,MAAO,mBAET,CACEF,KAAM,eACNC,MAAO,2BACPC,MAAO,aAET,CACEF,KAAM,iBACNC,MAAO,6BACPC,MAAO,aAET,CACEF,KAAM,eACNC,MAAO,2BACPC,MAAO,aAET,CACEF,KAAM,kBACNC,MAAO,8BACPC,MAAO,mBAET,CACEF,KAAM,cACNC,MAAO,0BACPC,MAAO,cAGXC,YAAa,MA9CE,E,sEAkDT,IAAD,OACP,OACE,kBAAC,IAAD,CACEN,MAAM,yBACND,QAASQ,KAAKT,MAAMC,QACpBG,KAAMK,KAAKT,MAAMI,KACjBM,WAAY,SAACC,EAAKH,GAAN,OAAsB,EAAKI,SAAS,CAAEJ,iBAClDK,QAAS,CACPC,cAAc,EACdC,UAAU,EACVC,SAAU,GAEVC,SAAU,SAAAC,GAAO,MAAK,CACpBC,MACE,EAAKnB,MAAMQ,aACX,EAAKR,MAAMQ,YAAYY,UAAUC,KAAOH,EAAQE,UAAUC,GACtD,UACA,OACNC,gBACE,EAAKtB,MAAMQ,aACX,EAAKR,MAAMQ,YAAYY,UAAUC,KAAOH,EAAQE,UAAUC,GACtD,OACA,UAGVE,SAAU,CACRC,SAAU,SAAAC,GAAO,OACf,IAAIC,SAAQ,SAACC,EAASC,GACpBC,YAAW,WACT,EAAKjB,UACH,SAAAkB,GAAS,MAAK,CACZ1B,KAAK,GAAD,mBAAM0B,EAAU1B,MAAhB,CAAsBqB,OAE5BE,KAED,SAEPI,YAAa,SAACN,EAASO,GAAV,OACX,IAAIN,SAAQ,SAACC,EAASC,GACpBC,YAAW,WACT,IAAII,EAAQ,GACZC,OAAOC,OAAOF,EAAO,EAAKjC,MAAMI,MAChCgC,QAAQC,IAAI,UAAWJ,GAEvBA,EADc,EAAKjC,MAAMI,KAAKkC,QAAQN,IACvBP,EACf,EAAKb,SAAS,CAAER,KAAM6B,IAAS,WAC7BN,SAED,SAEPY,YAAa,SAAAP,GAAO,OAClB,IAAIN,SAAQ,SAACC,EAASC,GACpBC,YAAW,WAEP,IAAII,EAAQ,GACZC,OAAOC,OAAOF,EAAO,EAAKjC,MAAMI,MAChCgC,QAAQC,IAAI,UAAWJ,GACvB,IAAMO,EAAQ,EAAKxC,MAAMI,KAAKkC,QAAQN,GACtCC,EAAMQ,OAAOD,EAAO,GACpBJ,QAAQC,IAAIJ,GACZ,EAAKrB,UACH,SAAAkB,GAAS,sBAAUA,EAAV,CAAqB1B,KAAM6B,MACpCN,GAGJA,MACC,gB,GArHgBe,aCSbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5923f611.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport MaterialTable from \"material-table\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [\n        { title: \"Name\", field: \"name\" },\n        {\n          title: \"Email\",\n          field: \"email\"\n        },\n        {\n          title: \"Group\",\n          field: \"group\"\n        }\n      ],\n      data: [\n        {\n          name: \"Hector Ramirez\",\n          email: \"hector.ramirez@planned.com\",\n          group: \"Human Resources\"\n        },\n        {\n          name: \"Ivan Reitman\",\n          email: \"ivan.reitman@planned.com\",\n          group: \"Developer\"\n        },\n        {\n          name: \"Robert Duhnman\",\n          email: \"robert.duhnman@planned.com\",\n          group: \"Marketing\"\n        },\n        {\n          name: \"Emilie Roads\",\n          email: \"emilie.roads@planned.com\",\n          group: \"Developer\"\n        },\n        {\n          name: \"Melissa Gilbert\",\n          email: \"melissa.gilbert@planned.com\",\n          group: \"Human Resources\"\n        },\n        {\n          name: \"Ezra Miller\",\n          email: \"ezra.miller@planned.com\",\n          group: \"Marketing\"\n        }\n      ],\n      selectedRow: null\n    };\n  }\n\n  render() {\n    return (\n      <MaterialTable\n        title=\"Planned take home test\"\n        columns={this.state.columns}\n        data={this.state.data}\n        onRowClick={(evt, selectedRow) => this.setState({ selectedRow })}\n        options={{\n          exportButton: true,\n          grouping: true,\n          pageSize: 10,\n\n          rowStyle: rowData => ({\n            color:\n              this.state.selectedRow &&\n              this.state.selectedRow.tableData.id === rowData.tableData.id\n                ? \"#52a27e\"\n                : \"#000\",\n            backgroundColor:\n              this.state.selectedRow &&\n              this.state.selectedRow.tableData.id === rowData.tableData.id\n                ? \"#EEE\"\n                : \"#FFF\"\n          })\n        }}\n        editable={{\n          onRowAdd: newData =>\n            new Promise((resolve, reject) => {\n              setTimeout(() => {\n                this.setState(\n                  prevState => ({\n                    data: [...prevState.data, newData]\n                  }),\n                  resolve\n                );\n              }, 1000);\n            }),\n          onRowUpdate: (newData, oldData) =>\n            new Promise((resolve, reject) => {\n              setTimeout(() => {\n                let clone = [];\n                Object.assign(clone, this.state.data);\n                console.log(\"clone1:\", clone);\n                const index = this.state.data.indexOf(oldData);\n                clone[index] = newData;\n                this.setState({ data: clone }, () => {\n                  resolve();\n                });\n              }, 1000);\n            }),\n          onRowDelete: oldData =>\n            new Promise((resolve, reject) => {\n              setTimeout(() => {\n                {\n                  let clone = [];\n                  Object.assign(clone, this.state.data);\n                  console.log(\"clone1:\", clone);\n                  const index = this.state.data.indexOf(oldData);\n                  clone.splice(index, 1);\n                  console.log(clone);\n                  this.setState(\n                    prevState => ({ ...prevState, data: clone }),\n                    resolve\n                  );\n                }\n                resolve();\n              }, 1000);\n            })\n        }}\n      />\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}